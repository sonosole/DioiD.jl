# promoted by higher data type, in case of trunc error
Base.:^(x::Dioid{‚®Å, *, <:Integer}, n::Integer) where ‚®Å = Dioid{‚®Å, *}( ·µõ(x) ^ n )
Base.:^(x::Dioid{‚®Å, +, <:Integer}, n::Integer) where ‚®Å = Dioid{‚®Å, +}( ·µõ(x) * n )

# keep Dioid's data type
Base.:^(x::Dioid{‚®Å, *, T}, n::Real)    where {‚®Å, T} = Dioid{‚®Å, *, T}( ·µõ(x) ^ T(n) )
Base.:^(x::Dioid{‚®Å, *, T}, n::Integer) where {‚®Å, T} = Dioid{‚®Å, *, T}( ·µõ(x) ^ n )

# BE CAREFUL, if ‚®Ä op is +, then the radix must be positive integer
Base.:^(x::Dioid{‚®Å, +, T}, n::Integer) where {‚®Å, T} = Dioid{‚®Å, +, T}( ·µõ(x) * n )

# BE CAREFUL, if ‚®Ä op is max or min, then the radix must be positive integer
Base.:^(x::Dioid{‚®Å, min, T}, ::Integer) where {‚®Å, T} = x
Base.:^(x::Dioid{‚®Å, max, T}, ::Integer) where {‚®Å, T} = x

# BE CAREFUL, if ‚®Ä op is max or min, then the radix must be positive integer
Base.:^(x::Dioid{‚®Å,  logadd, T}, n::Integer) where {‚®Å, T} = Dioid{‚®Å,  logadd}( ·µõ(x) + T(log(n)) )
Base.:^(x::Dioid{‚®Å, nlogadd, T}, n::Integer) where {‚®Å, T} = Dioid{‚®Å, nlogadd}( ·µõ(x) - T(log(n)) )

#= 
inv is a op about symmetric, that is saying the input and output are symmetric about the identity of ‚äô operation.
Mathematically we have y·µß = inv(x·µß) iff x·µß ‚®Ä y·µß = ùüô
=#
Base.inv(x::Dioid{‚®Å, *, T}) where {‚®Å,T} = Dioid{‚®Å, *}( inv(·µõ(x)) )
Base.inv(x::Dioid{‚®Å, +, T}) where {‚®Å,T} = Dioid{‚®Å, +}(   - ·µõ(x)  )
Base.inv(x::Dioid{‚®Å, ‚®Ä, T}) where {‚®Å,‚®Ä,T} = div(one(Dioid{‚®Å,‚®Ä,T}), x)

