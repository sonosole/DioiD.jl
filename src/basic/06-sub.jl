#=
general inverse op of addition, mathematically we have
    x·µß - y·µß = z·µß iff z·µß ‚äï y·µß = x·µß
=#
function Base.:-(x::Dioid{‚®Å, ‚®Ä, Tx},
                 y::Dioid{‚®Å, ‚®Ä, Ty}) where {‚®Å, ‚®Ä, Tx, Ty}
    z = inverse(Val(‚®Å))(·µõ(x), ·µõ(y))
    return Dioid{‚®Å, ‚®Ä}(z)
end


function Base.:-(x::Dioid{+, ‚®Ä, Tx},
                 y::Dioid{+, ‚®Ä, Ty}) where {‚®Ä, Tx, Ty}
    return Dioid{+, ‚®Ä}(·µõ(x) - ·µõ(y))
end

Base.:-(x::Dioid{+, ‚®Ä, Tx}, y::Number) where {‚®Ä, Tx} = Dioid{+, ‚®Ä}( ·µõ(x) - y )
Base.:-(x::Number, y::Dioid{+, ‚®Ä, Ty}) where {‚®Ä, Ty} = Dioid{+, ‚®Ä}( x - ·µõ(y) )


function Base.:-(x::Dioid{*, ‚®Ä, Tx},
                 y::Dioid{*, ‚®Ä, Ty}) where {‚®Ä, Tx, Ty}
    return Dioid{*, ‚®Ä}(·µõ(x) / ·µõ(y))
end

Base.:-(x::Dioid{*, ‚®Ä, Tx}, y::Number) where {‚®Ä, Tx} = Dioid{*, ‚®Ä}( ·µõ(x) / y )
Base.:-(x::Number, y::Dioid{*, ‚®Ä, Ty}) where {‚®Ä, Ty} = Dioid{*, ‚®Ä}( x / ·µõ(y) )

# ùüò - x·µß = y·µß iff x·µß ‚äï y·µß = ùüò
Base.:-(x::Dioid{*, ‚®Ä, T}) where {‚®Ä, T} = Dioid{*, ‚®Ä, T}( inv( ·µõ(x) ) )
Base.:-(x::Dioid{+, ‚®Ä, T}) where {‚®Ä, T} = Dioid{+, ‚®Ä, T}(    - ·µõ(x)   )


# \ominus ‚äñ for semiring's written language
"""
    ‚äñ (x::Dioid, y::Dioid) = x - y
    ‚äñ (x::Dioid, y::Number) = x - y
    ‚äñ (x::Number, y::Dioid) = x - y
    ‚äñ (x::Dioid) = - x

`x·µß‚äñ y·µß = z·µß iff z·µß‚äï y·µß = x·µß`. This syntax is not **``recommended``**, because of its confusability.\n
for `‚äï ‚âù +`, we have `x·µß‚äñ y·µß ‚âù x·µß + (0-y)·µß` and \n
for `‚äï ‚âù *`, we have `x·µß‚äñ y·µß ‚âù x·µß * (1/y)·µß`

# Examples
```julia
julia> 1 - Dioid{*, min}(5) == Dioid{*, min}(1/5)
true

julia> 1 - Dioid{+, min}(5) == Dioid{+, min}(1-5)
true

julia> 1 - Dioid{max, logadd}(5)
ERROR: MethodError: no method matching -(::Int64, ::Dioid{max, logadd, Int64})
```
"""
‚äñ(x::Dioid, y::Dioid) = x - y
‚äñ(x::Dioid, y::Number)    = x - y
‚äñ(x::Number,    y::Dioid) = x - y
‚äñ(x::Dioid) = - x
